if [type] == "syslog"
{
	mutate
	{
		rename => [ "MESSAGE", "message" ]
	}
	multiline
	{
		pattern => "(^.+Exception: .+)|(^\s+at .+)|(^\s+... \d+ more)|(^\s*Caused by:.+)"
		what => "previous"
	}
	if [SYSLOG_IDENTIFIER] == "kernel"
	{
		grok
		{
			patterns_dir => "/home/shd/.grok"
			match => [ "message", "%{IPTABLES}" ]
		}
		if "_grokparsefailure" in [tags]
		{
			mutate
			{
				remove_tag => "_grokparsefailure"
			}
		}
		else
		{
			mutate
			{
				replace => [ "type", "iptables" ]
			}
		}
	}
	else if [SYSLOG_IDENTIFIER] == "sshd"
	{
		grok
		{
			match => { "message" => "Accepted %{WORD:auth_method} for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2: RSA %{BASE16NUM:fingerprint}" }
		}
		grok
		{
			match => { "message" => "Invalid user %{USER:username} from %{IP:src_ip}" }
		}
		mutate
		{
			replace => [ "type", "sshd" ]
		}
	}
	else
	{
		mutate
		{
			type => "%{SYSLOG_IDENTIFIER}"
		}
	}
}
else if [type] == "p0f"
{
	grok
	{
		patterns_dir => "/home/shd/.grok"
		match => ["message", "%{POFHEADER}"]
	}
	kv
	{
		value_split => "="
		field_split => "\|"
	}
}
if [src_ip]
{
	geoip
	{
		source => "src_ip"
		remove_field => "src_ip"
		target => "tmp"
		add_field => [ "[tmp][coordinates]", "%{[tmp][longitude]}" ]
		add_field => [ "[tmp][coordinates]", "%{[tmp][latitude]}"  ]
	}
	mutate
	{
		convert => [ "[tmp][coordinates]", "float" ]
		rename => [ "tmp", "src_ip" ]
	}
}
